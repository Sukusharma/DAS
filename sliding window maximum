class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] result = new int[n-k+1];
        Deque<Integer> deque = new ArrayDeque<>();

        for(int i =0;i < n; i++){
             // Remove from front if index is out of window range k
            if(!deque.isEmpty() && deque.peek() < i - k + 1){
                deque.poll();
            }
            // remove smaller numbers in  range k as they are useless
            while(!deque.isEmpty() && deque.peekLast()< nums[i] ){
                deque.pollLast();
            }
            deque.offer(i);
//jese hi 3 range ka ek max niklta he add in result array here i->3=k-1-->3-1=2
            if(i>=k-1){
                //deque.peek() gives index of max nums[deque.peek()] gives value of max
                result[i-k+1] = nums[deque.peek()];
            }

        }
        return result;
    }
}//correct it 
